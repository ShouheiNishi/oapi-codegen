// Package pkg1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package pkg1

import (
	"context"
	"fmt"
	"io"
	"mime"
	"mime/multipart"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/deepmap/oapi-codegen/v2/internal/test/strict-server-matrix/pkg2"
	"github.com/go-chi/chi/v5"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// TestSchema defines model for TestSchema.
type TestSchema struct {
	Field1 string `json:"field1"`
	Field2 int    `json:"field2"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// TestExtFixedWildcardMultipart request
	TestExtFixedWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestExtHeaderFixedWildcardMultipart request
	TestExtHeaderFixedWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestExtHeaderWildcardMultipart request
	TestExtHeaderWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestExtWildcardMultipart request
	TestExtWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestFixedWildcardMultipart request
	TestFixedWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHeaderFixedWildcardMultipart request
	TestHeaderFixedWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestHeaderWildcardMultipart request
	TestHeaderWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefFixedWildcardMultipart request
	TestRefFixedWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefHeaderFixedWildcardMultipart request
	TestRefHeaderFixedWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefHeaderWildcardMultipart request
	TestRefHeaderWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefWildcardMultipart request
	TestRefWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestWildcardMultipart request
	TestWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) TestExtFixedWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestExtFixedWildcardMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestExtHeaderFixedWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestExtHeaderFixedWildcardMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestExtHeaderWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestExtHeaderWildcardMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestExtWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestExtWildcardMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestFixedWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestFixedWildcardMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHeaderFixedWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHeaderFixedWildcardMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestHeaderWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestHeaderWildcardMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefFixedWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefFixedWildcardMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefHeaderFixedWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefHeaderFixedWildcardMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefHeaderWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefHeaderWildcardMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefWildcardMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestWildcardMultipart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestWildcardMultipartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewTestExtFixedWildcardMultipartRequest generates requests for TestExtFixedWildcardMultipart
func NewTestExtFixedWildcardMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ext-fixed-wildcard-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestExtHeaderFixedWildcardMultipartRequest generates requests for TestExtHeaderFixedWildcardMultipart
func NewTestExtHeaderFixedWildcardMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ext-header-fixed-wildcard-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestExtHeaderWildcardMultipartRequest generates requests for TestExtHeaderWildcardMultipart
func NewTestExtHeaderWildcardMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ext-header-wildcard-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestExtWildcardMultipartRequest generates requests for TestExtWildcardMultipart
func NewTestExtWildcardMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ext-wildcard-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestFixedWildcardMultipartRequest generates requests for TestFixedWildcardMultipart
func NewTestFixedWildcardMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-fixed-wildcard-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHeaderFixedWildcardMultipartRequest generates requests for TestHeaderFixedWildcardMultipart
func NewTestHeaderFixedWildcardMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-header-fixed-wildcard-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestHeaderWildcardMultipartRequest generates requests for TestHeaderWildcardMultipart
func NewTestHeaderWildcardMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-header-wildcard-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefFixedWildcardMultipartRequest generates requests for TestRefFixedWildcardMultipart
func NewTestRefFixedWildcardMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-fixed-wildcard-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefHeaderFixedWildcardMultipartRequest generates requests for TestRefHeaderFixedWildcardMultipart
func NewTestRefHeaderFixedWildcardMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-header-fixed-wildcard-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefHeaderWildcardMultipartRequest generates requests for TestRefHeaderWildcardMultipart
func NewTestRefHeaderWildcardMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-header-wildcard-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefWildcardMultipartRequest generates requests for TestRefWildcardMultipart
func NewTestRefWildcardMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-wildcard-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestWildcardMultipartRequest generates requests for TestWildcardMultipart
func NewTestWildcardMultipartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-wildcard-multipart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// TestExtFixedWildcardMultipartWithResponse request
	TestExtFixedWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestExtFixedWildcardMultipartResponse, error)

	// TestExtHeaderFixedWildcardMultipartWithResponse request
	TestExtHeaderFixedWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestExtHeaderFixedWildcardMultipartResponse, error)

	// TestExtHeaderWildcardMultipartWithResponse request
	TestExtHeaderWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestExtHeaderWildcardMultipartResponse, error)

	// TestExtWildcardMultipartWithResponse request
	TestExtWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestExtWildcardMultipartResponse, error)

	// TestFixedWildcardMultipartWithResponse request
	TestFixedWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedWildcardMultipartResponse, error)

	// TestHeaderFixedWildcardMultipartWithResponse request
	TestHeaderFixedWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFixedWildcardMultipartResponse, error)

	// TestHeaderWildcardMultipartWithResponse request
	TestHeaderWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderWildcardMultipartResponse, error)

	// TestRefFixedWildcardMultipartWithResponse request
	TestRefFixedWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedWildcardMultipartResponse, error)

	// TestRefHeaderFixedWildcardMultipartWithResponse request
	TestRefHeaderFixedWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderFixedWildcardMultipartResponse, error)

	// TestRefHeaderWildcardMultipartWithResponse request
	TestRefHeaderWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderWildcardMultipartResponse, error)

	// TestRefWildcardMultipartWithResponse request
	TestRefWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefWildcardMultipartResponse, error)

	// TestWildcardMultipartWithResponse request
	TestWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestWildcardMultipartResponse, error)
}

type TestExtFixedWildcardMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestExtFixedWildcardMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestExtFixedWildcardMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestExtHeaderFixedWildcardMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestExtHeaderFixedWildcardMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestExtHeaderFixedWildcardMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestExtHeaderWildcardMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestExtHeaderWildcardMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestExtHeaderWildcardMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestExtWildcardMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestExtWildcardMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestExtWildcardMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestFixedWildcardMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestFixedWildcardMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestFixedWildcardMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHeaderFixedWildcardMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestHeaderFixedWildcardMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHeaderFixedWildcardMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestHeaderWildcardMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestHeaderWildcardMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestHeaderWildcardMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefFixedWildcardMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefFixedWildcardMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefFixedWildcardMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefHeaderFixedWildcardMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefHeaderFixedWildcardMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefHeaderFixedWildcardMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefHeaderWildcardMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefHeaderWildcardMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefHeaderWildcardMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefWildcardMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefWildcardMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefWildcardMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestWildcardMultipartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestWildcardMultipartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestWildcardMultipartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TestExtFixedWildcardMultipartWithResponse request returning *TestExtFixedWildcardMultipartResponse
func (c *ClientWithResponses) TestExtFixedWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestExtFixedWildcardMultipartResponse, error) {
	rsp, err := c.TestExtFixedWildcardMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestExtFixedWildcardMultipartResponse(rsp)
}

// TestExtHeaderFixedWildcardMultipartWithResponse request returning *TestExtHeaderFixedWildcardMultipartResponse
func (c *ClientWithResponses) TestExtHeaderFixedWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestExtHeaderFixedWildcardMultipartResponse, error) {
	rsp, err := c.TestExtHeaderFixedWildcardMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestExtHeaderFixedWildcardMultipartResponse(rsp)
}

// TestExtHeaderWildcardMultipartWithResponse request returning *TestExtHeaderWildcardMultipartResponse
func (c *ClientWithResponses) TestExtHeaderWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestExtHeaderWildcardMultipartResponse, error) {
	rsp, err := c.TestExtHeaderWildcardMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestExtHeaderWildcardMultipartResponse(rsp)
}

// TestExtWildcardMultipartWithResponse request returning *TestExtWildcardMultipartResponse
func (c *ClientWithResponses) TestExtWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestExtWildcardMultipartResponse, error) {
	rsp, err := c.TestExtWildcardMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestExtWildcardMultipartResponse(rsp)
}

// TestFixedWildcardMultipartWithResponse request returning *TestFixedWildcardMultipartResponse
func (c *ClientWithResponses) TestFixedWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedWildcardMultipartResponse, error) {
	rsp, err := c.TestFixedWildcardMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestFixedWildcardMultipartResponse(rsp)
}

// TestHeaderFixedWildcardMultipartWithResponse request returning *TestHeaderFixedWildcardMultipartResponse
func (c *ClientWithResponses) TestHeaderFixedWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderFixedWildcardMultipartResponse, error) {
	rsp, err := c.TestHeaderFixedWildcardMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHeaderFixedWildcardMultipartResponse(rsp)
}

// TestHeaderWildcardMultipartWithResponse request returning *TestHeaderWildcardMultipartResponse
func (c *ClientWithResponses) TestHeaderWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestHeaderWildcardMultipartResponse, error) {
	rsp, err := c.TestHeaderWildcardMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestHeaderWildcardMultipartResponse(rsp)
}

// TestRefFixedWildcardMultipartWithResponse request returning *TestRefFixedWildcardMultipartResponse
func (c *ClientWithResponses) TestRefFixedWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedWildcardMultipartResponse, error) {
	rsp, err := c.TestRefFixedWildcardMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefFixedWildcardMultipartResponse(rsp)
}

// TestRefHeaderFixedWildcardMultipartWithResponse request returning *TestRefHeaderFixedWildcardMultipartResponse
func (c *ClientWithResponses) TestRefHeaderFixedWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderFixedWildcardMultipartResponse, error) {
	rsp, err := c.TestRefHeaderFixedWildcardMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefHeaderFixedWildcardMultipartResponse(rsp)
}

// TestRefHeaderWildcardMultipartWithResponse request returning *TestRefHeaderWildcardMultipartResponse
func (c *ClientWithResponses) TestRefHeaderWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefHeaderWildcardMultipartResponse, error) {
	rsp, err := c.TestRefHeaderWildcardMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefHeaderWildcardMultipartResponse(rsp)
}

// TestRefWildcardMultipartWithResponse request returning *TestRefWildcardMultipartResponse
func (c *ClientWithResponses) TestRefWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefWildcardMultipartResponse, error) {
	rsp, err := c.TestRefWildcardMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefWildcardMultipartResponse(rsp)
}

// TestWildcardMultipartWithResponse request returning *TestWildcardMultipartResponse
func (c *ClientWithResponses) TestWildcardMultipartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestWildcardMultipartResponse, error) {
	rsp, err := c.TestWildcardMultipart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestWildcardMultipartResponse(rsp)
}

// ParseTestExtFixedWildcardMultipartResponse parses an HTTP response from a TestExtFixedWildcardMultipartWithResponse call
func ParseTestExtFixedWildcardMultipartResponse(rsp *http.Response) (*TestExtFixedWildcardMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestExtFixedWildcardMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestExtHeaderFixedWildcardMultipartResponse parses an HTTP response from a TestExtHeaderFixedWildcardMultipartWithResponse call
func ParseTestExtHeaderFixedWildcardMultipartResponse(rsp *http.Response) (*TestExtHeaderFixedWildcardMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestExtHeaderFixedWildcardMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestExtHeaderWildcardMultipartResponse parses an HTTP response from a TestExtHeaderWildcardMultipartWithResponse call
func ParseTestExtHeaderWildcardMultipartResponse(rsp *http.Response) (*TestExtHeaderWildcardMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestExtHeaderWildcardMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestExtWildcardMultipartResponse parses an HTTP response from a TestExtWildcardMultipartWithResponse call
func ParseTestExtWildcardMultipartResponse(rsp *http.Response) (*TestExtWildcardMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestExtWildcardMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestFixedWildcardMultipartResponse parses an HTTP response from a TestFixedWildcardMultipartWithResponse call
func ParseTestFixedWildcardMultipartResponse(rsp *http.Response) (*TestFixedWildcardMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestFixedWildcardMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestHeaderFixedWildcardMultipartResponse parses an HTTP response from a TestHeaderFixedWildcardMultipartWithResponse call
func ParseTestHeaderFixedWildcardMultipartResponse(rsp *http.Response) (*TestHeaderFixedWildcardMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHeaderFixedWildcardMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestHeaderWildcardMultipartResponse parses an HTTP response from a TestHeaderWildcardMultipartWithResponse call
func ParseTestHeaderWildcardMultipartResponse(rsp *http.Response) (*TestHeaderWildcardMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestHeaderWildcardMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefFixedWildcardMultipartResponse parses an HTTP response from a TestRefFixedWildcardMultipartWithResponse call
func ParseTestRefFixedWildcardMultipartResponse(rsp *http.Response) (*TestRefFixedWildcardMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefFixedWildcardMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefHeaderFixedWildcardMultipartResponse parses an HTTP response from a TestRefHeaderFixedWildcardMultipartWithResponse call
func ParseTestRefHeaderFixedWildcardMultipartResponse(rsp *http.Response) (*TestRefHeaderFixedWildcardMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefHeaderFixedWildcardMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefHeaderWildcardMultipartResponse parses an HTTP response from a TestRefHeaderWildcardMultipartWithResponse call
func ParseTestRefHeaderWildcardMultipartResponse(rsp *http.Response) (*TestRefHeaderWildcardMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefHeaderWildcardMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefWildcardMultipartResponse parses an HTTP response from a TestRefWildcardMultipartWithResponse call
func ParseTestRefWildcardMultipartResponse(rsp *http.Response) (*TestRefWildcardMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefWildcardMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestWildcardMultipartResponse parses an HTTP response from a TestWildcardMultipartWithResponse call
func ParseTestWildcardMultipartResponse(rsp *http.Response) (*TestWildcardMultipartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestWildcardMultipartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /test-ext-fixed-wildcard-multipart)
	TestExtFixedWildcardMultipart(w http.ResponseWriter, r *http.Request)

	// (GET /test-ext-header-fixed-wildcard-multipart)
	TestExtHeaderFixedWildcardMultipart(w http.ResponseWriter, r *http.Request)

	// (GET /test-ext-header-wildcard-multipart)
	TestExtHeaderWildcardMultipart(w http.ResponseWriter, r *http.Request)

	// (GET /test-ext-wildcard-multipart)
	TestExtWildcardMultipart(w http.ResponseWriter, r *http.Request)

	// (GET /test-fixed-wildcard-multipart)
	TestFixedWildcardMultipart(w http.ResponseWriter, r *http.Request)

	// (GET /test-header-fixed-wildcard-multipart)
	TestHeaderFixedWildcardMultipart(w http.ResponseWriter, r *http.Request)

	// (GET /test-header-wildcard-multipart)
	TestHeaderWildcardMultipart(w http.ResponseWriter, r *http.Request)

	// (GET /test-ref-fixed-wildcard-multipart)
	TestRefFixedWildcardMultipart(w http.ResponseWriter, r *http.Request)

	// (GET /test-ref-header-fixed-wildcard-multipart)
	TestRefHeaderFixedWildcardMultipart(w http.ResponseWriter, r *http.Request)

	// (GET /test-ref-header-wildcard-multipart)
	TestRefHeaderWildcardMultipart(w http.ResponseWriter, r *http.Request)

	// (GET /test-ref-wildcard-multipart)
	TestRefWildcardMultipart(w http.ResponseWriter, r *http.Request)

	// (GET /test-wildcard-multipart)
	TestWildcardMultipart(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /test-ext-fixed-wildcard-multipart)
func (_ Unimplemented) TestExtFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /test-ext-header-fixed-wildcard-multipart)
func (_ Unimplemented) TestExtHeaderFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /test-ext-header-wildcard-multipart)
func (_ Unimplemented) TestExtHeaderWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /test-ext-wildcard-multipart)
func (_ Unimplemented) TestExtWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /test-fixed-wildcard-multipart)
func (_ Unimplemented) TestFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /test-header-fixed-wildcard-multipart)
func (_ Unimplemented) TestHeaderFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /test-header-wildcard-multipart)
func (_ Unimplemented) TestHeaderWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /test-ref-fixed-wildcard-multipart)
func (_ Unimplemented) TestRefFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /test-ref-header-fixed-wildcard-multipart)
func (_ Unimplemented) TestRefHeaderFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /test-ref-header-wildcard-multipart)
func (_ Unimplemented) TestRefHeaderWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /test-ref-wildcard-multipart)
func (_ Unimplemented) TestRefWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /test-wildcard-multipart)
func (_ Unimplemented) TestWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// TestExtFixedWildcardMultipart operation middleware
func (siw *ServerInterfaceWrapper) TestExtFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestExtFixedWildcardMultipart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TestExtHeaderFixedWildcardMultipart operation middleware
func (siw *ServerInterfaceWrapper) TestExtHeaderFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestExtHeaderFixedWildcardMultipart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TestExtHeaderWildcardMultipart operation middleware
func (siw *ServerInterfaceWrapper) TestExtHeaderWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestExtHeaderWildcardMultipart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TestExtWildcardMultipart operation middleware
func (siw *ServerInterfaceWrapper) TestExtWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestExtWildcardMultipart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TestFixedWildcardMultipart operation middleware
func (siw *ServerInterfaceWrapper) TestFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestFixedWildcardMultipart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TestHeaderFixedWildcardMultipart operation middleware
func (siw *ServerInterfaceWrapper) TestHeaderFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestHeaderFixedWildcardMultipart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TestHeaderWildcardMultipart operation middleware
func (siw *ServerInterfaceWrapper) TestHeaderWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestHeaderWildcardMultipart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TestRefFixedWildcardMultipart operation middleware
func (siw *ServerInterfaceWrapper) TestRefFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestRefFixedWildcardMultipart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TestRefHeaderFixedWildcardMultipart operation middleware
func (siw *ServerInterfaceWrapper) TestRefHeaderFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestRefHeaderFixedWildcardMultipart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TestRefHeaderWildcardMultipart operation middleware
func (siw *ServerInterfaceWrapper) TestRefHeaderWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestRefHeaderWildcardMultipart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TestRefWildcardMultipart operation middleware
func (siw *ServerInterfaceWrapper) TestRefWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestRefWildcardMultipart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TestWildcardMultipart operation middleware
func (siw *ServerInterfaceWrapper) TestWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestWildcardMultipart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/test-ext-fixed-wildcard-multipart", wrapper.TestExtFixedWildcardMultipart)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/test-ext-header-fixed-wildcard-multipart", wrapper.TestExtHeaderFixedWildcardMultipart)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/test-ext-header-wildcard-multipart", wrapper.TestExtHeaderWildcardMultipart)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/test-ext-wildcard-multipart", wrapper.TestExtWildcardMultipart)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/test-fixed-wildcard-multipart", wrapper.TestFixedWildcardMultipart)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/test-header-fixed-wildcard-multipart", wrapper.TestHeaderFixedWildcardMultipart)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/test-header-wildcard-multipart", wrapper.TestHeaderWildcardMultipart)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/test-ref-fixed-wildcard-multipart", wrapper.TestRefFixedWildcardMultipart)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/test-ref-header-fixed-wildcard-multipart", wrapper.TestRefHeaderFixedWildcardMultipart)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/test-ref-header-wildcard-multipart", wrapper.TestRefHeaderWildcardMultipart)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/test-ref-wildcard-multipart", wrapper.TestRefWildcardMultipart)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/test-wildcard-multipart", wrapper.TestWildcardMultipart)
	})

	return r
}

type TestRespRefFixedWildcardMultipartMultipartResponse func(writer *multipart.Writer) error

type TestRespRefHeaderFixedWildcardMultipartResponseHeaders struct {
	Header1 string
	Header2 int
}
type TestRespRefHeaderFixedWildcardMultipartMultipartResponse struct {
	Body func(writer *multipart.Writer) error

	Headers     TestRespRefHeaderFixedWildcardMultipartResponseHeaders
	ContentType string
}

type TestRespRefHeaderWildcardMultipartResponseHeaders struct {
	Header1 string
	Header2 int
}
type TestRespRefHeaderWildcardMultipartMultipartResponse struct {
	Body func(writer *multipart.Writer) error

	Headers     TestRespRefHeaderWildcardMultipartResponseHeaders
	ContentType string
}

type TestRespRefWildcardMultipartMultipartResponse func(writer *multipart.Writer) error

type TestExtFixedWildcardMultipartRequestObject struct {
}

type TestExtFixedWildcardMultipartResponseObject interface {
	VisitTestExtFixedWildcardMultipartResponse(w http.ResponseWriter) error
}

type TestExtFixedWildcardMultipart200MultipartResponse externalRef0.TestRespExtFixedWildcardMultipartMultipartResponse

func (response TestExtFixedWildcardMultipart200MultipartResponse) VisitTestExtFixedWildcardMultipartResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/*", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(200)

	defer writer.Close()
	return response(writer)
}

type TestExtHeaderFixedWildcardMultipartRequestObject struct {
}

type TestExtHeaderFixedWildcardMultipartResponseObject interface {
	VisitTestExtHeaderFixedWildcardMultipartResponse(w http.ResponseWriter) error
}

type TestExtHeaderFixedWildcardMultipart200MultipartResponse struct {
	externalRef0.TestRespExtHeaderFixedWildcardMultipartMultipartResponse
}

func (response TestExtHeaderFixedWildcardMultipart200MultipartResponse) VisitTestExtHeaderFixedWildcardMultipartResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/*", map[string]string{"boundary": writer.Boundary()}))
	w.Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	w.Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	w.WriteHeader(200)

	defer writer.Close()
	return response.Body(writer)
}

type TestExtHeaderWildcardMultipartRequestObject struct {
}

type TestExtHeaderWildcardMultipartResponseObject interface {
	VisitTestExtHeaderWildcardMultipartResponse(w http.ResponseWriter) error
}

type TestExtHeaderWildcardMultipartdefaultMultipartResponse struct {
	Body        func(writer *multipart.Writer) error
	Headers     externalRef0.TestRespExtHeaderWildcardMultipartResponseHeaders
	StatusCode  int
	ContentType string
}

func (response TestExtHeaderWildcardMultipartdefaultMultipartResponse) VisitTestExtHeaderWildcardMultipartResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/*", map[string]string{"boundary": writer.Boundary()}))
	w.Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	w.Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	w.WriteHeader(response.StatusCode)

	defer writer.Close()
	return response.Body(writer)
}

type TestExtWildcardMultipartRequestObject struct {
}

type TestExtWildcardMultipartResponseObject interface {
	VisitTestExtWildcardMultipartResponse(w http.ResponseWriter) error
}

type TestExtWildcardMultipartdefaultMultipartResponse struct {
	Body        func(writer *multipart.Writer) error
	StatusCode  int
	ContentType string
}

func (response TestExtWildcardMultipartdefaultMultipartResponse) VisitTestExtWildcardMultipartResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/*", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(response.StatusCode)

	defer writer.Close()
	return response.Body(writer)
}

type TestFixedWildcardMultipartRequestObject struct {
}

type TestFixedWildcardMultipartResponseObject interface {
	VisitTestFixedWildcardMultipartResponse(w http.ResponseWriter) error
}

type TestFixedWildcardMultipart200MultipartResponse func(writer *multipart.Writer) error

func (response TestFixedWildcardMultipart200MultipartResponse) VisitTestFixedWildcardMultipartResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/*", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(200)

	defer writer.Close()
	return response(writer)
}

type TestHeaderFixedWildcardMultipartRequestObject struct {
}

type TestHeaderFixedWildcardMultipartResponseObject interface {
	VisitTestHeaderFixedWildcardMultipartResponse(w http.ResponseWriter) error
}

type TestHeaderFixedWildcardMultipart200ResponseHeaders struct {
	Header1 string
	Header2 int
}

type TestHeaderFixedWildcardMultipart200MultipartResponse struct {
	Body        func(writer *multipart.Writer) error
	Headers     TestHeaderFixedWildcardMultipart200ResponseHeaders
	ContentType string
}

func (response TestHeaderFixedWildcardMultipart200MultipartResponse) VisitTestHeaderFixedWildcardMultipartResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/*", map[string]string{"boundary": writer.Boundary()}))
	w.Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	w.Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	w.WriteHeader(200)

	defer writer.Close()
	return response.Body(writer)
}

type TestHeaderWildcardMultipartRequestObject struct {
}

type TestHeaderWildcardMultipartResponseObject interface {
	VisitTestHeaderWildcardMultipartResponse(w http.ResponseWriter) error
}

type TestHeaderWildcardMultipartdefaultResponseHeaders struct {
	Header1 string
	Header2 int
}

type TestHeaderWildcardMultipartdefaultMultipartResponse struct {
	Body        func(writer *multipart.Writer) error
	Headers     TestHeaderWildcardMultipartdefaultResponseHeaders
	StatusCode  int
	ContentType string
}

func (response TestHeaderWildcardMultipartdefaultMultipartResponse) VisitTestHeaderWildcardMultipartResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/*", map[string]string{"boundary": writer.Boundary()}))
	w.Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	w.Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	w.WriteHeader(response.StatusCode)

	defer writer.Close()
	return response.Body(writer)
}

type TestRefFixedWildcardMultipartRequestObject struct {
}

type TestRefFixedWildcardMultipartResponseObject interface {
	VisitTestRefFixedWildcardMultipartResponse(w http.ResponseWriter) error
}

type TestRefFixedWildcardMultipart200MultipartResponse TestRespRefFixedWildcardMultipartMultipartResponse

func (response TestRefFixedWildcardMultipart200MultipartResponse) VisitTestRefFixedWildcardMultipartResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/*", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(200)

	defer writer.Close()
	return response(writer)
}

type TestRefHeaderFixedWildcardMultipartRequestObject struct {
}

type TestRefHeaderFixedWildcardMultipartResponseObject interface {
	VisitTestRefHeaderFixedWildcardMultipartResponse(w http.ResponseWriter) error
}

type TestRefHeaderFixedWildcardMultipart200MultipartResponse struct {
	TestRespRefHeaderFixedWildcardMultipartMultipartResponse
}

func (response TestRefHeaderFixedWildcardMultipart200MultipartResponse) VisitTestRefHeaderFixedWildcardMultipartResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/*", map[string]string{"boundary": writer.Boundary()}))
	w.Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	w.Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	w.WriteHeader(200)

	defer writer.Close()
	return response.Body(writer)
}

type TestRefHeaderWildcardMultipartRequestObject struct {
}

type TestRefHeaderWildcardMultipartResponseObject interface {
	VisitTestRefHeaderWildcardMultipartResponse(w http.ResponseWriter) error
}

type TestRefHeaderWildcardMultipartdefaultMultipartResponse struct {
	Body        func(writer *multipart.Writer) error
	Headers     TestRespRefHeaderWildcardMultipartResponseHeaders
	StatusCode  int
	ContentType string
}

func (response TestRefHeaderWildcardMultipartdefaultMultipartResponse) VisitTestRefHeaderWildcardMultipartResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/*", map[string]string{"boundary": writer.Boundary()}))
	w.Header().Set("header1", fmt.Sprint(response.Headers.Header1))
	w.Header().Set("header2", fmt.Sprint(response.Headers.Header2))
	w.WriteHeader(response.StatusCode)

	defer writer.Close()
	return response.Body(writer)
}

type TestRefWildcardMultipartRequestObject struct {
}

type TestRefWildcardMultipartResponseObject interface {
	VisitTestRefWildcardMultipartResponse(w http.ResponseWriter) error
}

type TestRefWildcardMultipartdefaultMultipartResponse struct {
	Body        func(writer *multipart.Writer) error
	StatusCode  int
	ContentType string
}

func (response TestRefWildcardMultipartdefaultMultipartResponse) VisitTestRefWildcardMultipartResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/*", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(response.StatusCode)

	defer writer.Close()
	return response.Body(writer)
}

type TestWildcardMultipartRequestObject struct {
}

type TestWildcardMultipartResponseObject interface {
	VisitTestWildcardMultipartResponse(w http.ResponseWriter) error
}

type TestWildcardMultipartdefaultMultipartResponse struct {
	Body        func(writer *multipart.Writer) error
	StatusCode  int
	ContentType string
}

func (response TestWildcardMultipartdefaultMultipartResponse) VisitTestWildcardMultipartResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/*", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(response.StatusCode)

	defer writer.Close()
	return response.Body(writer)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /test-ext-fixed-wildcard-multipart)
	TestExtFixedWildcardMultipart(ctx context.Context, request TestExtFixedWildcardMultipartRequestObject) (TestExtFixedWildcardMultipartResponseObject, error)

	// (GET /test-ext-header-fixed-wildcard-multipart)
	TestExtHeaderFixedWildcardMultipart(ctx context.Context, request TestExtHeaderFixedWildcardMultipartRequestObject) (TestExtHeaderFixedWildcardMultipartResponseObject, error)

	// (GET /test-ext-header-wildcard-multipart)
	TestExtHeaderWildcardMultipart(ctx context.Context, request TestExtHeaderWildcardMultipartRequestObject) (TestExtHeaderWildcardMultipartResponseObject, error)

	// (GET /test-ext-wildcard-multipart)
	TestExtWildcardMultipart(ctx context.Context, request TestExtWildcardMultipartRequestObject) (TestExtWildcardMultipartResponseObject, error)

	// (GET /test-fixed-wildcard-multipart)
	TestFixedWildcardMultipart(ctx context.Context, request TestFixedWildcardMultipartRequestObject) (TestFixedWildcardMultipartResponseObject, error)

	// (GET /test-header-fixed-wildcard-multipart)
	TestHeaderFixedWildcardMultipart(ctx context.Context, request TestHeaderFixedWildcardMultipartRequestObject) (TestHeaderFixedWildcardMultipartResponseObject, error)

	// (GET /test-header-wildcard-multipart)
	TestHeaderWildcardMultipart(ctx context.Context, request TestHeaderWildcardMultipartRequestObject) (TestHeaderWildcardMultipartResponseObject, error)

	// (GET /test-ref-fixed-wildcard-multipart)
	TestRefFixedWildcardMultipart(ctx context.Context, request TestRefFixedWildcardMultipartRequestObject) (TestRefFixedWildcardMultipartResponseObject, error)

	// (GET /test-ref-header-fixed-wildcard-multipart)
	TestRefHeaderFixedWildcardMultipart(ctx context.Context, request TestRefHeaderFixedWildcardMultipartRequestObject) (TestRefHeaderFixedWildcardMultipartResponseObject, error)

	// (GET /test-ref-header-wildcard-multipart)
	TestRefHeaderWildcardMultipart(ctx context.Context, request TestRefHeaderWildcardMultipartRequestObject) (TestRefHeaderWildcardMultipartResponseObject, error)

	// (GET /test-ref-wildcard-multipart)
	TestRefWildcardMultipart(ctx context.Context, request TestRefWildcardMultipartRequestObject) (TestRefWildcardMultipartResponseObject, error)

	// (GET /test-wildcard-multipart)
	TestWildcardMultipart(ctx context.Context, request TestWildcardMultipartRequestObject) (TestWildcardMultipartResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// TestExtFixedWildcardMultipart operation middleware
func (sh *strictHandler) TestExtFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	var request TestExtFixedWildcardMultipartRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TestExtFixedWildcardMultipart(ctx, request.(TestExtFixedWildcardMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestExtFixedWildcardMultipart")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TestExtFixedWildcardMultipartResponseObject); ok {
		if err := validResponse.VisitTestExtFixedWildcardMultipartResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestExtHeaderFixedWildcardMultipart operation middleware
func (sh *strictHandler) TestExtHeaderFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	var request TestExtHeaderFixedWildcardMultipartRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TestExtHeaderFixedWildcardMultipart(ctx, request.(TestExtHeaderFixedWildcardMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestExtHeaderFixedWildcardMultipart")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TestExtHeaderFixedWildcardMultipartResponseObject); ok {
		if err := validResponse.VisitTestExtHeaderFixedWildcardMultipartResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestExtHeaderWildcardMultipart operation middleware
func (sh *strictHandler) TestExtHeaderWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	var request TestExtHeaderWildcardMultipartRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TestExtHeaderWildcardMultipart(ctx, request.(TestExtHeaderWildcardMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestExtHeaderWildcardMultipart")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TestExtHeaderWildcardMultipartResponseObject); ok {
		if err := validResponse.VisitTestExtHeaderWildcardMultipartResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestExtWildcardMultipart operation middleware
func (sh *strictHandler) TestExtWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	var request TestExtWildcardMultipartRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TestExtWildcardMultipart(ctx, request.(TestExtWildcardMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestExtWildcardMultipart")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TestExtWildcardMultipartResponseObject); ok {
		if err := validResponse.VisitTestExtWildcardMultipartResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestFixedWildcardMultipart operation middleware
func (sh *strictHandler) TestFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	var request TestFixedWildcardMultipartRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TestFixedWildcardMultipart(ctx, request.(TestFixedWildcardMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestFixedWildcardMultipart")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TestFixedWildcardMultipartResponseObject); ok {
		if err := validResponse.VisitTestFixedWildcardMultipartResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestHeaderFixedWildcardMultipart operation middleware
func (sh *strictHandler) TestHeaderFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	var request TestHeaderFixedWildcardMultipartRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TestHeaderFixedWildcardMultipart(ctx, request.(TestHeaderFixedWildcardMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestHeaderFixedWildcardMultipart")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TestHeaderFixedWildcardMultipartResponseObject); ok {
		if err := validResponse.VisitTestHeaderFixedWildcardMultipartResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestHeaderWildcardMultipart operation middleware
func (sh *strictHandler) TestHeaderWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	var request TestHeaderWildcardMultipartRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TestHeaderWildcardMultipart(ctx, request.(TestHeaderWildcardMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestHeaderWildcardMultipart")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TestHeaderWildcardMultipartResponseObject); ok {
		if err := validResponse.VisitTestHeaderWildcardMultipartResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestRefFixedWildcardMultipart operation middleware
func (sh *strictHandler) TestRefFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	var request TestRefFixedWildcardMultipartRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefFixedWildcardMultipart(ctx, request.(TestRefFixedWildcardMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefFixedWildcardMultipart")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TestRefFixedWildcardMultipartResponseObject); ok {
		if err := validResponse.VisitTestRefFixedWildcardMultipartResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestRefHeaderFixedWildcardMultipart operation middleware
func (sh *strictHandler) TestRefHeaderFixedWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	var request TestRefHeaderFixedWildcardMultipartRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefHeaderFixedWildcardMultipart(ctx, request.(TestRefHeaderFixedWildcardMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefHeaderFixedWildcardMultipart")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TestRefHeaderFixedWildcardMultipartResponseObject); ok {
		if err := validResponse.VisitTestRefHeaderFixedWildcardMultipartResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestRefHeaderWildcardMultipart operation middleware
func (sh *strictHandler) TestRefHeaderWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	var request TestRefHeaderWildcardMultipartRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefHeaderWildcardMultipart(ctx, request.(TestRefHeaderWildcardMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefHeaderWildcardMultipart")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TestRefHeaderWildcardMultipartResponseObject); ok {
		if err := validResponse.VisitTestRefHeaderWildcardMultipartResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestRefWildcardMultipart operation middleware
func (sh *strictHandler) TestRefWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	var request TestRefWildcardMultipartRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefWildcardMultipart(ctx, request.(TestRefWildcardMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefWildcardMultipart")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TestRefWildcardMultipartResponseObject); ok {
		if err := validResponse.VisitTestRefWildcardMultipartResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestWildcardMultipart operation middleware
func (sh *strictHandler) TestWildcardMultipart(w http.ResponseWriter, r *http.Request) {
	var request TestWildcardMultipartRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TestWildcardMultipart(ctx, request.(TestWildcardMultipartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestWildcardMultipart")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TestWildcardMultipartResponseObject); ok {
		if err := validResponse.VisitTestWildcardMultipartResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
