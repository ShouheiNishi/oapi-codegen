// Package pkg1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package pkg1

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// TestFixedNoContent request
	TestFixedNoContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestNoContent request
	TestNoContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefFixedNoContent request
	TestRefFixedNoContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestRefNoContent request
	TestRefNoContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) TestFixedNoContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestFixedNoContentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestNoContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestNoContentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefFixedNoContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefFixedNoContentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestRefNoContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestRefNoContentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewTestFixedNoContentRequest generates requests for TestFixedNoContent
func NewTestFixedNoContentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-fixed-nocontent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestNoContentRequest generates requests for TestNoContent
func NewTestNoContentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-nocontent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefFixedNoContentRequest generates requests for TestRefFixedNoContent
func NewTestRefFixedNoContentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-fixed-nocontent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestRefNoContentRequest generates requests for TestRefNoContent
func NewTestRefNoContentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ref-nocontent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// TestFixedNoContentWithResponse request
	TestFixedNoContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedNoContentResponse, error)

	// TestNoContentWithResponse request
	TestNoContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestNoContentResponse, error)

	// TestRefFixedNoContentWithResponse request
	TestRefFixedNoContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedNoContentResponse, error)

	// TestRefNoContentWithResponse request
	TestRefNoContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefNoContentResponse, error)
}

type TestFixedNoContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestFixedNoContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestFixedNoContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestNoContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestNoContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestNoContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefFixedNoContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefFixedNoContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefFixedNoContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestRefNoContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestRefNoContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestRefNoContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TestFixedNoContentWithResponse request returning *TestFixedNoContentResponse
func (c *ClientWithResponses) TestFixedNoContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestFixedNoContentResponse, error) {
	rsp, err := c.TestFixedNoContent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestFixedNoContentResponse(rsp)
}

// TestNoContentWithResponse request returning *TestNoContentResponse
func (c *ClientWithResponses) TestNoContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestNoContentResponse, error) {
	rsp, err := c.TestNoContent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestNoContentResponse(rsp)
}

// TestRefFixedNoContentWithResponse request returning *TestRefFixedNoContentResponse
func (c *ClientWithResponses) TestRefFixedNoContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefFixedNoContentResponse, error) {
	rsp, err := c.TestRefFixedNoContent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefFixedNoContentResponse(rsp)
}

// TestRefNoContentWithResponse request returning *TestRefNoContentResponse
func (c *ClientWithResponses) TestRefNoContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestRefNoContentResponse, error) {
	rsp, err := c.TestRefNoContent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestRefNoContentResponse(rsp)
}

// ParseTestFixedNoContentResponse parses an HTTP response from a TestFixedNoContentWithResponse call
func ParseTestFixedNoContentResponse(rsp *http.Response) (*TestFixedNoContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestFixedNoContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestNoContentResponse parses an HTTP response from a TestNoContentWithResponse call
func ParseTestNoContentResponse(rsp *http.Response) (*TestNoContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestNoContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefFixedNoContentResponse parses an HTTP response from a TestRefFixedNoContentWithResponse call
func ParseTestRefFixedNoContentResponse(rsp *http.Response) (*TestRefFixedNoContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefFixedNoContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestRefNoContentResponse parses an HTTP response from a TestRefNoContentWithResponse call
func ParseTestRefNoContentResponse(rsp *http.Response) (*TestRefNoContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestRefNoContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /test-fixed-nocontent)
	TestFixedNoContent(c *gin.Context)

	// (GET /test-nocontent)
	TestNoContent(c *gin.Context)

	// (GET /test-ref-fixed-nocontent)
	TestRefFixedNoContent(c *gin.Context)

	// (GET /test-ref-nocontent)
	TestRefNoContent(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// TestFixedNoContent operation middleware
func (siw *ServerInterfaceWrapper) TestFixedNoContent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TestFixedNoContent(c)
}

// TestNoContent operation middleware
func (siw *ServerInterfaceWrapper) TestNoContent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TestNoContent(c)
}

// TestRefFixedNoContent operation middleware
func (siw *ServerInterfaceWrapper) TestRefFixedNoContent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TestRefFixedNoContent(c)
}

// TestRefNoContent operation middleware
func (siw *ServerInterfaceWrapper) TestRefNoContent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TestRefNoContent(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/test-fixed-nocontent", wrapper.TestFixedNoContent)
	router.GET(options.BaseURL+"/test-nocontent", wrapper.TestNoContent)
	router.GET(options.BaseURL+"/test-ref-fixed-nocontent", wrapper.TestRefFixedNoContent)
	router.GET(options.BaseURL+"/test-ref-nocontent", wrapper.TestRefNoContent)
}

type TestRespRefFixedNoContentResponse struct {
}

type TestRespRefNoContentResponse struct {
}

type TestFixedNoContentRequestObject struct {
}

type TestFixedNoContentResponseObject interface {
	VisitTestFixedNoContentResponse(w http.ResponseWriter) error
}

type TestFixedNoContent204Response struct {
}

func (response TestFixedNoContent204Response) VisitTestFixedNoContentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type TestNoContentRequestObject struct {
}

type TestNoContentResponseObject interface {
	VisitTestNoContentResponse(w http.ResponseWriter) error
}

type TestNoContentdefaultResponse struct {
	StatusCode int
}

func (response TestNoContentdefaultResponse) VisitTestNoContentResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type TestRefFixedNoContentRequestObject struct {
}

type TestRefFixedNoContentResponseObject interface {
	VisitTestRefFixedNoContentResponse(w http.ResponseWriter) error
}

type TestRefFixedNoContent204Response = TestRespRefFixedNoContentResponse

func (response TestRefFixedNoContent204Response) VisitTestRefFixedNoContentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type TestRefNoContentRequestObject struct {
}

type TestRefNoContentResponseObject interface {
	VisitTestRefNoContentResponse(w http.ResponseWriter) error
}

type TestRefNoContentdefaultResponse struct {
	StatusCode int
}

func (response TestRefNoContentdefaultResponse) VisitTestRefNoContentResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /test-fixed-nocontent)
	TestFixedNoContent(ctx context.Context, request TestFixedNoContentRequestObject) (TestFixedNoContentResponseObject, error)

	// (GET /test-nocontent)
	TestNoContent(ctx context.Context, request TestNoContentRequestObject) (TestNoContentResponseObject, error)

	// (GET /test-ref-fixed-nocontent)
	TestRefFixedNoContent(ctx context.Context, request TestRefFixedNoContentRequestObject) (TestRefFixedNoContentResponseObject, error)

	// (GET /test-ref-nocontent)
	TestRefNoContent(ctx context.Context, request TestRefNoContentRequestObject) (TestRefNoContentResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// TestFixedNoContent operation middleware
func (sh *strictHandler) TestFixedNoContent(ctx *gin.Context) {
	var request TestFixedNoContentRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestFixedNoContent(ctx, request.(TestFixedNoContentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestFixedNoContent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(TestFixedNoContentResponseObject); ok {
		if err := validResponse.VisitTestFixedNoContentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestNoContent operation middleware
func (sh *strictHandler) TestNoContent(ctx *gin.Context) {
	var request TestNoContentRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestNoContent(ctx, request.(TestNoContentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestNoContent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(TestNoContentResponseObject); ok {
		if err := validResponse.VisitTestNoContentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestRefFixedNoContent operation middleware
func (sh *strictHandler) TestRefFixedNoContent(ctx *gin.Context) {
	var request TestRefFixedNoContentRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefFixedNoContent(ctx, request.(TestRefFixedNoContentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefFixedNoContent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(TestRefFixedNoContentResponseObject); ok {
		if err := validResponse.VisitTestRefFixedNoContentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestRefNoContent operation middleware
func (sh *strictHandler) TestRefNoContent(ctx *gin.Context) {
	var request TestRefNoContentRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestRefNoContent(ctx, request.(TestRefNoContentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestRefNoContent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(TestRefNoContentResponseObject); ok {
		if err := validResponse.VisitTestRefNoContentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
