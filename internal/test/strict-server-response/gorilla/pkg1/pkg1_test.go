// Code generated by generator/generate.go DO NOT EDIT.

package pkg1_test

import (
	"context"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/deepmap/oapi-codegen/v2/internal/test/strict-server-response/gorilla/pkg1"
)

type strictServerInterface struct{}

func (s strictServerInterface) TestFixedText(ctx context.Context, request pkg1.TestFixedTextRequestObject) (pkg1.TestFixedTextResponseObject, error) {
	return pkg1.TestFixedText200TextResponse("bar"), nil
}

func TestFixedText(t *testing.T) {
	hh := pkg1.Handler(pkg1.NewStrictHandler(strictServerInterface{}, nil))

	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		if !assert.Equal(t, "/test-fixed-text", r.URL.Path) {
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		hh.ServeHTTP(w, r)
	}))
	defer ts.Close()

	c, err := pkg1.NewClientWithResponses(ts.URL)
	assert.NoError(t, err)
	res, err := c.TestFixedTextWithResponse(context.TODO())
	assert.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode())
	assert.Equal(t, "text/plain", res.HTTPResponse.Header.Get("Content-Type"))
	assert.Equal(t, []byte("bar"), res.Body)
}
