// Package pkg1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package pkg1

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/deepmap/oapi-codegen/v2/internal/test/strict-server-response/iris/pkg2"
	"github.com/kataras/iris/v12"
	strictiris "github.com/oapi-codegen/runtime/strictmiddleware/iris"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// TestExtFixedJSON request
	TestExtFixedJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) TestExtFixedJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestExtFixedJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewTestExtFixedJSONRequest generates requests for TestExtFixedJSON
func NewTestExtFixedJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/test-ext-fixed-json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// TestExtFixedJSONWithResponse request
	TestExtFixedJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestExtFixedJSONResponse, error)
}

type TestExtFixedJSONResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.TestRespExtFixedJSON
}

// Status returns HTTPResponse.Status
func (r TestExtFixedJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestExtFixedJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TestExtFixedJSONWithResponse request returning *TestExtFixedJSONResponse
func (c *ClientWithResponses) TestExtFixedJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestExtFixedJSONResponse, error) {
	rsp, err := c.TestExtFixedJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestExtFixedJSONResponse(rsp)
}

// ParseTestExtFixedJSONResponse parses an HTTP response from a TestExtFixedJSONWithResponse call
func ParseTestExtFixedJSONResponse(rsp *http.Response) (*TestExtFixedJSONResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestExtFixedJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.TestRespExtFixedJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /test-ext-fixed-json)
	TestExtFixedJSON(ctx iris.Context)
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc iris.Handler

// TestExtFixedJSON converts iris context to params.
func (w *ServerInterfaceWrapper) TestExtFixedJSON(ctx iris.Context) {

	// Invoke the callback with all the unmarshaled arguments
	w.Handler.TestExtFixedJSON(ctx)
}

// IrisServerOption is the option for iris server
type IrisServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *iris.Application, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, IrisServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *iris.Application, si ServerInterface, options IrisServerOptions) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.Get(options.BaseURL+"/test-ext-fixed-json", wrapper.TestExtFixedJSON)

	router.Build()
}

type TestExtFixedJSONRequestObject struct {
}

type TestExtFixedJSONResponseObject interface {
	VisitTestExtFixedJSONResponse(ctx iris.Context) error
}

type TestExtFixedJSON200JSONResponse struct {
	externalRef0.TestRespExtFixedJSONJSONResponse
}

func (response TestExtFixedJSON200JSONResponse) VisitTestExtFixedJSONResponse(ctx iris.Context) error {
	ctx.ResponseWriter().Header().Set("Content-Type", "application/json")
	ctx.StatusCode(200)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /test-ext-fixed-json)
	TestExtFixedJSON(ctx context.Context, request TestExtFixedJSONRequestObject) (TestExtFixedJSONResponseObject, error)
}

type StrictHandlerFunc = strictiris.StrictIrisHandlerFunc
type StrictMiddlewareFunc = strictiris.StrictIrisMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// TestExtFixedJSON operation middleware
func (sh *strictHandler) TestExtFixedJSON(ctx iris.Context) {
	var request TestExtFixedJSONRequestObject

	handler := func(ctx iris.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TestExtFixedJSON(ctx, request.(TestExtFixedJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestExtFixedJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.StopWithError(http.StatusBadRequest, err)
		return
	} else if validResponse, ok := response.(TestExtFixedJSONResponseObject); ok {
		if err := validResponse.VisitTestExtFixedJSONResponse(ctx); err != nil {
			ctx.StopWithError(http.StatusBadRequest, err)
			return
		}
	} else if response != nil {
		ctx.Writef("Unexpected response type: %T", response)
		return
	}
}
